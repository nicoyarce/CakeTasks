# This file is a template, and might need editing before it works on your project.
# Official framework image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/php
image: registry.gitlab.com/aknosis/laravel-ci-example:latest

# Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: http://docs.gitlab.com/ce/ci/docker/using_docker_images.html#what-is-a-service
services:
  - mysql:5.7

# This folder is cached between builds
# http://docs.gitlab.com/ce/ci/yaml/README.html#cache
cache:
  paths:
  - vendor/
  - node_modules/

# This is a basic example for a gem or script which doesn't use
# services such as redis or postgres
before_script:
  # Install Composer and project dependencies.
  - composer install 
  - composer update

  # Install Node dependencies.
  # comment this out if you don't have a node dependency
  #- npm install

  # Copy over testing configuration.
  # Don't forget to set the database config in .env.testing correctly
  # DB_HOST=mysql
  # DB_DATABASE=project_name
  # DB_USERNAME=root
  # DB_PASSWORD=secret
  
  # Run npm build
  # comment this out if you don't have a frontend build
  # you can change this to to your frontend building script like
  # npm run build
  #- npm run dev

  # Generate an application key. Re-cache.
  - php artisan key:generate
  - php artisan config:cache

  # Run database migrations.
  - php artisan migrate

  # Run database seed
  - php artisan db:seed

test:
  script:
  # run laravel tests
  - php vendor/bin/phpunit --coverage-text --colors=never 

  # run frontend tests
  # if you have any task for testing frontend
  # set it in your package.json script
  # comment this out if you don't have a frontend test
  - npm test
